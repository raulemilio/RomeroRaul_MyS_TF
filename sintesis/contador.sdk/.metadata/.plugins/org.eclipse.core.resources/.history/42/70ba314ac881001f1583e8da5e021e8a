#include "xparameters.h"
#include "xil_io.h"
#include "counter_ip.h"
//====================================================
// Comandos para trabajar con counter_ip "r", "a", "d", "p"
// | COMANDO            | FORMATO         |
// | reset              | r  | 114 | 0x72 |
// | cuenta ascendente  | a  | 97  | 0x61 |
// | cuenta descendente | d  | 100 | 0x64 |
// | pausa              | p  | 112 | 0x70 |
// | comando inválido   | x  | 120 | 0x78 |

#define RESET_REG 		   0  // reset por registro
#define AVAILABLE_DATA     1  // Dato disponible para ser leido
#define NOT_AVAILABLE_DATA 0  // Dato no disponible

#define RESET_COMAND 	   114 // reset de la cuenta por comando
#define PAUSE              112 // pausa la cuenta
#define ASC_COUNT          97  // habilitación y cuenta ascendente
#define DES_COUNT          100 // habilitación y cuenta descendente
#define INVALID_COMAND     120 // comando inválido

int main (void) 
{
   int i = 0; // variable auxiliar para recorrer la secuencia de prueba
   int data[5]={ASC_COUNT,DES_COUNT,PAUSE,ASC_COUNT,RESET_COMAND}; // secuencia de prueba
   char ComandDataName[5][10]={"ASC_COUNT","DES_COUNT","PAUSE","ASC_COUNT","RESET_COMAND"};

   xil_printf("--------------------------\r\n");
   xil_printf("-- START PROGRAM COUNTER --\r\n");
   xil_printf("-- ALUMNO: RAUL ROMERO   --\r\n");
   xil_printf("--------------------------\r\n");

   // INICIALIZACIÓN
   COUNTER_IP_mWriteReg(XPAR_COUNTER_IP_0_S_AXI_BASEADDR,COUNTER_IP_S_AXI_SLV_REG0_OFFSET, RESET_REG); // reset count
   COUNTER_IP_mWriteReg(XPAR_COUNTER_IP_0_S_AXI_BASEADDR,COUNTER_IP_S_AXI_SLV_REG1_OFFSET, NOT_AVAILABLE_DATA);// dato no disponible
   COUNTER_IP_mWriteReg(XPAR_COUNTER_IP_0_S_AXI_BASEADDR,COUNTER_IP_S_AXI_SLV_REG2_OFFSET, INVALID_COMAND); // dato inválido
   xil_printf("-- INICIALIZACIÓN --> RESET_REG --%d\r\n",RESET_REG);
   xil_printf("-- INICIALIZACIÓN --> NOT_AVAILABLE_DATA --%d\r\n",NOT_AVAILABLE_DATA);
   xil_printf("-- INICIALIZACIÓN --> INVALID_COMAND --%d\r\n",INVALID_COMAND);

   while (1)
   {
	   if(i>4){
		   i=0;
	   }
	   xil_printf("--------------------------\r\n");
	   // Dato válido disponible
	   COUNTER_IP_mWriteReg(XPAR_COUNTER_IP_0_S_AXI_BASEADDR,COUNTER_IP_S_AXI_SLV_REG2_OFFSET, data[i]);
	   xil_printf("-- Comando  enviado-dato: %s --> %d\r\n", ComandDataName[i],data[i]);
	   // habilitación de dato disponible
	   COUNTER_IP_mWriteReg(XPAR_COUNTER_IP_0_S_AXI_BASEADDR,COUNTER_IP_S_AXI_SLV_REG1_OFFSET, AVAILABLE_DATA);
	   xil_printf("-- Dato habilitado --\r\n");
	   // disponibilidad del dato por 1 segundos
	   sleep(1);
	   // dato de entrada no disponible
	   COUNTER_IP_mWriteReg(XPAR_COUNTER_IP_0_S_AXI_BASEADDR,COUNTER_IP_S_AXI_SLV_REG1_OFFSET, NOT_AVAILABLE_DATA);
	   xil_printf("-- Dato deshabilitado   --\r\n");
	   // delay para visualizar el comportamiento del contador
	   xil_printf("-- sleep --\r\n");
	   sleep(10);
	   i++;
	   //xil_printf("-- i--%d\r\n",i);
   }
}



